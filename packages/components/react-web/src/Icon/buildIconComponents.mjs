#!/usr/bin/env node

import svgr from '@svgr/core';
import elements from '@compassion-gds/elements';
import prettier from 'prettier';
import svgo from 'svgo';

import fs from 'fs';
import path from 'path';

const iconSources = elements.icons;

const capitalize = (text) => {
  return text.charAt(0).toUpperCase() + text.slice(1);
};

const header = `
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// DO NOT MODIFY THIS FILE; IT WAS GENERATED BY buildIconComponents.mjs.
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

/** @jsxRuntime classic */
/** @jsx jsx */
import { jsx } from '@emotion/core';
import PropTypes from 'prop-types';
import iconStyles from '../Icon.styles';
`;

const footer = `

COMPONENT_NAME.propTypes = {
  fill: PropTypes.string,
  width: PropTypes.string,
  height: PropTypes.string
};

COMPONENT_NAME.defaultProps = {
  fill: 'currentColor',
  width: '1em',
  height: '1em'
};

`;

let indexJs = '';

Object.entries(iconSources).forEach((iconSource) => {
  const name = iconSource[0];

  const rawSvg = svgo.optimize(iconSource[1], [
    {
      name: 'removeDesc',
      active: false,
    },
    {
      name: 'removeTitle',
      active: false,
    },
  ]).data;

  const componentName = `Icon${capitalize(name)}`;

  indexJs += `export { default as ${componentName} } from './icons/${componentName}';\n`;

  svgr
    .default(
      rawSvg,
      {
        icon: true,
        outDir: './icons',
        ignoreExisting: true,
        ext: 'jsx',
        svgProps: {
          viewBox: '0 0 32 32',
          fill: '{props.fill}',
          width: '{props.width}',
          height: '{props.height}',
          className: 'gds-icon',
          css: '{iconStyles}',
        },
        svgo: false,
      },
      { componentName }
    )
    .then((jsCode) => {
      const body = jsCode
        .replace(/import \* as React[^\n]+/, '')
        .replace(/\n{1,}/g, '\n');

      const fileContents = `${header}\n${body}\n${footer.replace(
        /COMPONENT_NAME/g,
        componentName
      )}`;
      fs.writeFile(
        `${path.resolve()}/icons/${componentName}.jsx`,
        prettier.format(fileContents, { parser: 'babel' }),
        (err) => {
          if (err) {
            console.error(err);
          }
        }
      );
    });
});

fs.writeFile(`${path.resolve()}/index.js`, indexJs, (err) => {
  if (err) {
    console.error(err);
  }
});
