#!/usr/bin/env node
import svgr from '@svgr/core';
import * as elements from '@compassion-gds/elements';
import prettier from 'prettier';
import svgo from 'svgo';

import fs from 'fs';
import path from 'path';

const flagSources = elements.flags;

const capitalize = (text) => {
  return text.charAt(0).toUpperCase() + text.slice(1);
};

const header = `
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// DO NOT MODIFY THIS FILE; IT WAS GENERATED BY buildFlagComponents.mjs.
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


import PropTypes from 'prop-types';
import flagStyles from '../Flag.styles';
`;

const footer = `

COMPONENT_NAME.propTypes = {
  width: PropTypes.string,
  height: PropTypes.string
};

COMPONENT_NAME.defaultProps = {
};

`;

const buildFlags = (sources, outputDir) => {
  let indexJs = '';

  Object.entries(sources).forEach((flagSource) => {
    const name = flagSource[0];

    const rawSvg = svgo.optimize(flagSource[1], [
      {
        plugins: [
          {
            name: 'preset-default',
            params: { overrides: { removeTitle: false } },
          },
          {
            name: 'removeAttrs',
            params: { attrs: 'fill' },
          },
        ],
      },
    ]).data;

    const componentName = `Flag${capitalize(name)}`;

    indexJs += `export { default as ${componentName} } from './${componentName}';\n`;

    svgr
      .default(
        rawSvg,
        {
          outDir: `./${outputDir}`,
          dimensions: false,
          ignoreExisting: true,
          ext: 'jsx',
          svgProps: {
            viewBox: '0 0 86 64',
            className: 'gds-flag',
            css: '{flagStyles}',
          },
          svgo: false,
        },
        { componentName }
      )
      .then((jsCode) => {
        const body = jsCode
          .replace(/import \* as React[^\n]+/, '')
          .replace(/\n{1,}/g, '\n');

        const fileContents = `${header}\n${body}\n${footer.replace(
          /COMPONENT_NAME/g,
          componentName
        )}`;
        fs.writeFile(
          `${path.resolve()}/${outputDir}/${componentName}.jsx`,
          prettier.format(fileContents, { parser: 'babel' }),
          (err) => {
            if (err) {
              console.error(err);
            }
          }
        );
      });
  });

  fs.writeFile(`${path.resolve()}/${outputDir}/index.js`, indexJs, (err) => {
    if (err) {
      console.error(err);
    }
  });
};

[
  { sources: flagSources.programCountries, outputBaseName: 'ProgramCountries' },
  { sources: flagSources.partnerCountries, outputBaseName: 'PartnerCountries' },
].forEach((flags) => {
  buildFlags(flags.sources, flags.outputBaseName);
});
